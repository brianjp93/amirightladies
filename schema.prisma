datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator db {
    provider        = "prisma-client-py"
    interface       = "asyncio"
    previewFeatures = ["extendedIndexes"]
}

model HistorySong {
    id         Int      @id @default(autoincrement())
    song       Song     @relation(fields: [song_id], references: [id], onDelete: Cascade)
    song_id    Int      @unique
    guild      Guild    @relation(fields: [guild_id], references: [id])
    guild_id   Int
    created_at DateTime @default(now())

    @@index([created_at])
}

model Song {
    id          Int          @id @default(autoincrement())
    historysong HistorySong?
    stream_id   String       @db.VarChar(512)
    title       String       @db.VarChar(512)
    url         String       @db.VarChar(512)
    file        String       @db.VarChar(512)
    defersong   DeferSong?
}

model DeferSong {
    id         Int      @id @default(autoincrement())
    query      String   @default("") @db.VarChar(128)
    song       Song?    @relation(fields: [song_id], references: [id], onDelete: SetNull)
    song_id    Int?
    sort_int   Int      @default(autoincrement())
    guild      Guild?   @relation(fields: [guild_id], references: [id], onDelete: Cascade)
    guild_id   Int
    created_at DateTime @default(now())

    @@unique([guild_id, sort_int])
    @@index([sort_int])
}

model Member {
    id            Int      @id @default(autoincrement())
    exid          BigInt   @unique
    name          String   @db.VarChar(128)
    nick          String?  @db.VarChar(64)
    discriminator String   @db.VarChar(64)
    bot           Boolean  @default(false)
    guilds        Guild[]
    updated_at    DateTime @updatedAt
}

model Guild {
    id           Int           @id @default(autoincrement())
    exid         BigInt        @unique
    defersongs   DeferSong[]
    members      Member[]
    historysongs HistorySong[]
}
